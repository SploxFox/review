!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(1);t.Grouping=class extends o.Constituent{constructor(e){super(),this.composition=e}get formula(){return this.composition.formula}get molarMass(){return this.composition.molarMass*this.count}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(8);t.Constituent=class extends o.Entity{constructor(e=1){super(),this.count=e}get formula(){throw"String for this object not defined."}get molarMass(){throw"Method for molar mass not defined."}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(1),r=n(3);t.Atom=class extends o.Constituent{constructor(e,t=1){super(t),this.element=e}get formula(){return 1==this.count?this.element.symbol:this.element.symbol+r.subscriptify(this.count.toString())}get molarMass(){return this.element.atomicMass*this.count}}},function(e,t,n){"use strict";var o;function r(e){return e.replace(/₀|₁|₂|₃|₄|₅|₆|₇|₈|₉|₊|₋|₌|₍|₎/g,e=>o.normal[o.subscript.indexOf(e)]).replace(/⁰|¹|²|³|⁴|⁵|⁶|⁷|⁸|⁹|⁺|⁻|⁼|⁽|⁾/,e=>o.normal[o.superscript.indexOf(e)])}function i(e){return null!=e.match(/₀|₁|₂|₃|₄|₅|₆|₇|₈|₉|₊|₋|₌|₍|₎/g)}function s(e,t){var n=document.createElement("div");n.classList.add("fraction");var o=document.createElement("span");o.textContent=e;var r=document.createElement("span");return r.textContent=t,n.appendChild(o),n.appendChild(r),n}Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.normal="0123456789+-=()",e.subscript="₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎",e.superscript="⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾"}(o=t.CharacterSets||(t.CharacterSets={})),t.subscriptify=function(e){return e.replace(/[0-9]|\+|=\(|\)/g,e=>o.subscript[o.normal.indexOf(e)])},t.normify=r,t.hasSubscript=i,t.richify=function(e){for(var t=document.createElement("div"),n="",o=0;o<e.length;o++)if("$"==e[o]){var a;t.appendChild(document.createTextNode(r(n))),n="";var c=e.substring(o+1).split(")")[0];console.log(c);var l=c.split("(")[1].split(",");console.log(l);var m=c.split("(")[0];switch(console.log(m),m){case"frac":a=s(l[0],l[1])}t.appendChild(a),o+=c.length+1}else if(i(e[o])){t.appendChild(document.createTextNode(r(n))),n="";var u=document.createElement("sub");u.textContent=r(e[o]),t.appendChild(u)}else n+=e[o];return t.appendChild(document.createTextNode(r(n))),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(5),r=n(6),i=n(7),s=n(9),a=n(2),c=n(3),l=n(10);function m(){var e=Object.keys(r.PeriodicTable.elements);return r.PeriodicTable.elements[e[e.length*Math.random()<<0]]}function u(e,t,n){var o=Math.random()*(t-e)+e;return o==n?u(e,t,n):o}function d(e){var t,n=function e(){var t=u(1,5)<<0,n=u(1,6)<<0;console.log("Base: "+t+", Factor: "+n);var o=new i.Molecule(new s.Composition([new a.Atom(m(),t),new a.Atom(m(),t*n)]));return o.composition[0].element.name==o.composition[1].element.name?e():o}();switch(e){case"empirical-to-chemical":t=new o.Question("What is the chemical formula of a molecule with the empirical formula "+n.composition.empirical.formula+" and a molar mass of $frac("+Math.round(1e3*n.molarMass)/1e3+"g,mol)?",n.formula);break;case"mass-percent-to-chemical":t=new o.Question("A molecule of "+n.composition[0].element.name+" and "+n.composition[1].element.name+" is made up of "+Math.round(n.composition[0].molarMass/n.molarMass*1e3)/10+"% "+n.composition[0].element.name+", and it has a molar mass of $frac("+Math.round(1e3*n.molarMass)/1e3+"g,mol). What is its molecular formula?",n.formula);break;case"mass-percent-to-empirical":t=new o.Question("A molecule of "+n.composition[0].element.name+" and "+n.composition[1].element.name+" is made up of "+Math.round(n.composition[0].molarMass/n.molarMass*1e3)/10+"% "+n.composition[0].element.name+". What is its empirical formula?",n.composition.empirical.formula);break;case"two-mass-compositions-to-chemical":var r=u(1,5)<<0,l=u(1,5,r)<<0,d=Math.random()+1;n.composition.hillSort(),t=new o.Question("Let's suppose that "+n.composition[0].element.name+" and "+n.composition[1].element.name+" come together to form two different compounds. Compound 1 has "+Math.round(n.composition[0].element.atomicMass*r*d*100)/100+"g of "+n.composition[0].element.name+" and "+Math.round(n.composition[1].element.atomicMass*l*d*100)/100+"g of "+n.composition[1].element.name+". Compound 2 has "+Math.round(n.composition[0].molarMass*d*100)/100+"g of "+n.composition[0].element.name+" and "+Math.round(n.composition[1].molarMass*d*100)/100+"g of "+n.composition[1].element.name+". If the chemical formula of Compound 1 is "+n.composition[0].element.symbol+(1==r?"":c.subscriptify(r.toString()))+n.composition[1].element.symbol+(1==l?"":c.subscriptify(l.toString()))+", then what is the chemical formula of Compound 2?",n.formula)}return t}function f(){var e=document.getElementById("answer"),t=l.getCaretPosition(e)[0];e.innerHTML=c.richify(c.subscriptify(e.textContent)).innerHTML;var n=document.createRange(),o=window.getSelection();n.setStart(l.getSelectionStart(),t),n.collapse(!0),o.removeAllRanges(),o.addRange(n)}window.addEventListener("load",function(){document.getElementById("checkAnswer").addEventListener("click",function(e){var t=c.subscriptify(document.getElementById("answer").textContent);console.log(t),t==document.getElementById("answer").dataset.correctAnswer?document.getElementById("feedback").textContent="Correct!":document.getElementById("feedback").textContent="Incorrect."});var e="normal";window.addEventListener("keyup",function(t){48<=t.keyCode&&t.keyCode<=57&&"normal"==e?(e="subscript",f()):65<=t.keyCode&&t.keyCode<=90&&"subscript"==e&&(e="normal",f())}),document.getElementById("seeSolution").addEventListener("click",function(){document.getElementById("feedback").innerHTML="Solution: "+c.richify(document.getElementById("answer").dataset.correctAnswer).innerHTML}),document.getElementById("questionSelect").addEventListener("change",function(){""!=this.value&&(document.getElementById("generateQuestion").classList.remove("disabled"),document.getElementById("generateQuestion").classList.add("important"))}),document.getElementById("generateQuestion").addEventListener("click",function(){if(!document.getElementById("generateQuestion").classList.contains("disabled")){var e=d(document.getElementById("questionSelect").value);document.getElementById("prompt").innerHTML="",document.getElementById("prompt").appendChild(c.richify(e.prompt)),document.getElementById("answer").dataset.correctAnswer=e.answer,document.getElementById("question").style.display="block",document.getElementById("generateQuestion").classList.remove("important"),document.getElementById("feedback").textContent="",document.getElementById("answer").innerHTML=""}})}),console.log(new s.Composition([new a.Atom(r.PeriodicTable.elements.hydrogen,2),new a.Atom(r.PeriodicTable.elements.oxygen)]))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Question=class{constructor(e,t){this.prompt=e,this.answer=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.PeriodicTable=class{static get elements(){return{hydrogen:{symbol:"H",name:"hydrogen",atomicMass:1.008,number:1,group:1},carbon:{symbol:"C",name:"carbon",atomicMass:12.011,number:6},nitrogen:{symbol:"N",name:"nitrogen",atomicMass:14.007,number:7},oxygen:{symbol:"O",name:"oxygen",atomicMass:15.999,number:8},phosphorus:{symbol:"P",name:"phosphorus",atomicMass:30.974,number:15},sulfur:{symbol:"S",name:"sulfur",atomicMass:32.06,number:16},chlorine:{symbol:"Cl",name:"chlorine",atomicMass:35.45,number:17},iodine:{symbol:"I",name:"iodine",atomicMass:126.9,number:53}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);t.Molecule=class extends o.Grouping{constructor(e){super(e),console.log("Created new molecule with formula "+this.formula)}get formula(){return 1==this.count?super.formula:this.count.toString()+super.formula}get molarMass(){for(var e=0,t=0;t<this.composition.length;t++)e+=this.composition[t].molarMass;return e}parseFormula(e){}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Entity=class{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(2),r=n(0);class i extends Array{constructor(e=[]){super();for(var t=0;t<e.length;t++)this[t]=e[t];this.hillSort()}get empirical(){this.hillSort();for(var e=Array.from(this);;)try{e=s(e)}catch(e){break}return new i(e)}get formula(){this.hillSort();for(var e="",t=0;t<this.length;t++)e+=this[t].formula;return e}get molarMass(){for(var e=0,t=0;t<this.length;t++)e+=this[t].molarMass;return e}hillSort(){this.sort((e,t)=>e.formula.toLowerCase()<t.formula.toLowerCase()?-1:1);var e=this.find(e=>e instanceof o.Atom&&"carbon"==e.element.name);if(e){var t=this.find(e=>e instanceof o.Atom&&"hydrogen"==e.element.name);t&&(this.splice(this.indexOf(t),1),this.unshift(t)),this.splice(this.indexOf(e),1),this.unshift(e)}}}function s(e){var t=[],n=Math.min(...e.map(e=>e.count));if(console.log(n),1==n)throw console.log(1==n),"Error: Array of constituents is already simplified!";if(console.log("Empirical array length: "+t.length),e.forEach(e=>{var i;i=e instanceof r.Grouping?new r.Grouping(e.composition):new o.Atom(e.element);var s=e.count/n;i.count=s,t.push(i)}),t.every(e=>Number.isInteger(e.count)))return console.log(t),t;throw"Error: Array of constituents is already simplified!"}t.Composition=i},function(e,t,n){"use strict";function o(e,t){var n=t(e);for(e=e.firstChild;!1!==n&&e;e=e.nextSibling)n=o(e,t);return n}Object.defineProperty(t,"__esModule",{value:!0}),t.getSelectionStart=function(){var e=document.getSelection().anchorNode;return 3==e.nodeType?e.parentNode:e},t.node_walk=o,t.getCaretPosition=function(e){var t=window.getSelection(),n=[0,0];if(t.anchorNode==e)n=[t.anchorOffset,t.extentOffset];else{var r=[t.anchorNode,t.extentNode];if(!e.contains(t.anchorNode)||!e.contains(t.extentNode))return;var i,s=[0,0];o(e,function(e){for(i=0;i<2;i++)if(e==r[i]&&(s[i]=!0,s[0==i?1:0]))return!1;if(e.textContent&&!e.firstChild)for(i=0;i<2;i++)s[i]||(n[i]+=e.textContent.length)}),n[0]+=t.anchorOffset,n[1]+=t.extentOffset}return n[0]<=n[1]?n:[n[1],n[0]]}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,